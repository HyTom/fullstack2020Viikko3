{"version":3,"sources":["components/Filter.js","components/NewPerson.js","components/Numbers.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Filter","value","onChange","NewPerson","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","Person","i","person","filter","removePerson","deleteId","console","log","name","toUpperCase","includes","number","onClick","id","Numbers","persons","newFilter","map","key","baseUrl","axios","get","newObject","post","delete","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","errorMessage","setErrorMessage","useEffect","noteService","then","response","data","message","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","className","event","preventDefault","concat","target","findIndex","setTimeout","window","alert","confirm","Boolean","location","hostname","match","ReactDOM","render","p","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7ef33a06.chunk.js","sourcesContent":["import React, {} from 'react'\n\nconst Filter = ({value, onChange}) => {\n    return(\n    <form>\n        <div>filter shown with <input \n            value={value}\n            onChange={onChange}\n        /></div>\n    </form>\n)}\n\nexport default Filter","import React, {} from 'react'\n\nconst NewPerson = ({addPerson, newName, handleNameChange, newNumber, handleNumberChange}) => {\n    return (\n    <form onSubmit={addPerson}>\n          <div>name: <input \n          value={newName}\n          onChange={handleNameChange}\n          /></div>\n          <div>number: <input \n          value={newNumber}\n          onChange={handleNumberChange}\n          /></div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\nexport default NewPerson","import React, {} from 'react'\n\nconst Numbers = ({persons, newFilter, removePerson, deleteId}) => {\n    return (\n        <ul>\n        {persons.map((person, i) => \n        <Person key={i} person={person} filter={newFilter} removePerson={removePerson} deleteId={deleteId}/>\n        )}\n        </ul>\n    )\n}\n\nconst Person = ( {i, person, filter, removePerson, deleteId}) => {\n    console.log(filter)\n    if (person.name.toUpperCase().includes(filter.toUpperCase())) {  \n      return ( <>\n            <li> \n            {person.name} {person.number} \n            <form>\n                <button onClick={removePerson} id={person.id}>{'delete'}</button>\n            </form>\n            </li>\n          </>\n      )\n      }\n    return (<></>)\n  }\n\n  export default Numbers","import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/persons'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject)\n}\n\nconst removeId = id => {\n    axios.delete(`${baseUrl}/${id}`)\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nexport default { \n  getAll: getAll, \n  create: create, \n  update: update,\n  removeId: removeId\n}\n","import Filter from './components/Filter'\nimport NewPerson from './components/NewPerson'\nimport Numbers from './components/Numbers'\nimport React, { useState, useEffect } from 'react'\nimport noteService from './services/persons'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    noteService\n    .getAll()\n    .then(response => {\n      setPersons(response.data)\n      })\n  }, [])\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    if (persons.findIndex(person => person.name === newName) === -1) { \n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n        noteService\n        .create(personObject)\n        .then(response => {\n          setPersons(persons.concat(response.data))\n          setNewName('')\n          setNewNumber('')\n\n          setErrorMessage(\n            `${newName}' was addded to list`\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 2500)\n      })\n\n    } else {\n      window.alert(`${newName} is already added to phonebook`)\n    }\n  }\n\n  const removePerson = (event) => {\n    event.preventDefault()\n    if (window.confirm('Delete this??')) {\n        noteService\n        .removeId(event.target.id)\n        noteService\n        .getAll()\n        .then(response => {\n        setPersons(response.data)\n        })\n\n        setErrorMessage(\n          `Person was removed from existence`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 2500)\n\n      }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    event.preventDefault()\n    setPersons(persons.concat())\n    setNewFilter(event.target.value)\n  }\n\n  const Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n    const style = {\n      color: 'green',\n      background: 'lightgrey',\n      fontSize: 20,\n      borderStyle: 'solid',\n      borderRadius: 5,\n      padding: 10,\n      marginBottom: 10\n    }\n  \n    return (\n      <div style={style} className=\"error\">\n        {message}\n      </div>\n    )\n  }\n  \n\n  return (\n    <div>\n       <Notification message={errorMessage} />\n      <h2>Phonebook</h2>\n      <Filter value={newFilter}\n          onChange={handleFilterChange}/>\n\n      <h2>Add a new</h2>\n      <NewPerson addPerson={addPerson} \n                newName={newName}\n                handleNameChange={handleNameChange}\n                newNumber={newNumber}\n                handleNumberChange={handleNumberChange}\n        />\n\n      <h2>Numbers</h2>\n      <Numbers persons={persons} newFilter={newFilter} removePerson={removePerson}/>\n     \n    </div>\n  )\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App p/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}